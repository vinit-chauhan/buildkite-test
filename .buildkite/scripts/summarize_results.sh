#!/usr/bin/env bash
set -uo pipefail

echo "=== Results Summary Script ==="
echo "Build: ${BUILDKITE_BUILD_NUMBER:-unknown}"
echo "Issue: #${ISSUE_NUMBER:-unknown} from ${ISSUE_REPO:-unknown}"

# --- Required env ---
missing_vars=()
[[ -z "${ISSUE_NUMBER:-}" ]] && missing_vars+=("ISSUE_NUMBER")
[[ -z "${ISSUE_REPO:-}"   ]] && missing_vars+=("ISSUE_REPO")
[[ -z "${GITHUB_TOKEN:-}" ]] && missing_vars+=("GITHUB_TOKEN")
if [[ ${#missing_vars[@]} -gt 0 ]]; then
  echo "‚ùå Missing required environment variables:"; printf '  - %s\n' "${missing_vars[@]}"; exit 1
fi
echo "‚úÖ All required variables present"

# --- Download artifacts into ./results explicitly ---
echo ""
echo "Downloading result artifacts..."
mkdir -p results
if command -v buildkite-agent >/dev/null 2>&1; then
  # Download all JSONs that were uploaded as results/*.json by producer steps
  if buildkite-agent artifact download "results/*.json" results/; then
    echo "‚úÖ Successfully downloaded artifacts to ./results"
  else
    echo "‚ö†Ô∏è No artifacts matched results/*.json"
  fi
else
  echo "‚ö†Ô∏è buildkite-agent not available, assuming local run"
fi

# --- Verify inputs ---
if [[ ! -d results ]] || ! ls results/*.json >/dev/null 2>&1; then
  echo "‚ùå No result files found under ./results"; exit 1
fi
echo "Found result files:"; ls -la results/

# --- Summarize ---
TOTAL_INTEGRATIONS=0
PASSED_COUNT=0
FAILED_COUNT=0
RESULTS_JSON="[]"

for result_file in results/*.json; do
  [[ -f "$result_file" ]] || continue

  INTEGRATION=$(jq -r '.integration' "$result_file")
  STATUS=$(jq -r '.status' "$result_file")
  MESSAGE=$(jq -r '.message // ""' "$result_file")

  echo "Processing: $result_file -> $INTEGRATION ($STATUS)"

  RESULTS_JSON=$(echo "$RESULTS_JSON" \
    | jq --arg integration "$INTEGRATION" \
         --arg status "$STATUS" \
         --arg message "$MESSAGE" \
         --argjson result "$(cat $result_file)" \
         --slurpfile result "$result_file" \
         '. += [{"integration": $integration, "status": $status, "message": $message, "details": $result}]')

  ((TOTAL_INTEGRATIONS++))
  if [[ "$STATUS" == "passed" ]]; then ((PASSED_COUNT++)); else ((FAILED_COUNT++)); fi
done

# success rate without bc dependency
SUCCESS_RATE="0"
if [[ $TOTAL_INTEGRATIONS -gt 0 ]]; then
  # integer percentage with one decimal: (1000*x / n + 5)/10 trick or use awk
  SUCCESS_RATE=$(awk -v p="$PASSED_COUNT" -v t="$TOTAL_INTEGRATIONS" 'BEGIN { printf "%.1f", (p*100.0)/t }')
fi

echo ""
echo "Summary:"
echo "  Total integrations: $TOTAL_INTEGRATIONS"
echo "  Passed: $PASSED_COUNT"
echo "  Failed: $FAILED_COUNT"

SUMMARY_FILE="build-summary.json"
jq -n --arg bn "${BUILDKITE_BUILD_NUMBER:-}" \
      --arg bu "${BUILDKITE_BUILD_URL:-}" \
      --arg in "${ISSUE_NUMBER}" \
      --arg ir "${ISSUE_REPO}" \
      --arg ts "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
      --arg sr "$SUCCESS_RATE" \
      --argjson total "$TOTAL_INTEGRATIONS" \
      --argjson pass  "$PASSED_COUNT" \
      --argjson fail  "$FAILED_COUNT" \
      --argjson results "$RESULTS_JSON" \
'{
  build_number: $bn,
  build_url:    $bu,
  issue_number: $in,
  issue_repo:   $ir,
  timestamp:    $ts,
  total_integrations: $total,
  passed_count: $pass,
  failed_count: $fail,
  success_rate: ($sr|tonumber),
  results:      $results
}' > "$SUMMARY_FILE"
echo "Generated summary file: $SUMMARY_FILE"

# --- Build GitHub comment body (Markdown) ---
COMMENT_BODY="## üîç Integration Check Results

**Build:** [#${BUILDKITE_BUILD_NUMBER:-unknown}](${BUILDKITE_BUILD_URL:-})
**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')

### Summary
- **Total Integrations:** $TOTAL_INTEGRATIONS
- **Passed:** ‚úÖ $PASSED_COUNT
- **Failed:** ‚ùå $FAILED_COUNT
- **Success Rate:** ${SUCCESS_RATE}% 

### Detailed Results"
while IFS= read -r result; do
  INTEGRATION=$(echo "$result" | jq -r '.integration')
  STATUS=$(echo "$result" | jq -r '.status')
  MESSAGE=$(echo "$result" | jq -r '.message // ""')
  ICON=$([[ "$STATUS" == "passed" ]] && echo "‚úÖ" || echo "‚ùå")

  LINE="- ${ICON} **${INTEGRATION}**: ${MESSAGE}"
  PR_URL=$(echo "$result" | jq -r '.details.pr_url // empty')
  [[ -n "$PR_URL" ]] && LINE="${LINE} ([PR](${PR_URL}))"
  COMMENT_BODY="${COMMENT_BODY}"$'\n'"${LINE}"
done < <(echo "$RESULTS_JSON" | jq -c '.[]')

COMMENT_BODY="${COMMENT_BODY}

---
*This comment was automatically generated by Buildkite.*"

printf "%s\n" "$COMMENT_BODY" > github-comment.md
echo "Preview:"; echo "=========================================="; cat github-comment.md; echo "=========================================="

# --- Post comment via GitHub REST API (no gh install) ---
COMMENT_JSON=$(jq -Rs '{body: .}' github-comment.md)
curl -fsSL \
  -H "Authorization: Bearer ${GITHUB_TOKEN}" \
  -H "Accept: application/vnd.github+json" \
  -X POST "https://api.github.com/repos/${ISSUE_REPO}/issues/${ISSUE_NUMBER}/comments" \
  -d "${COMMENT_JSON}"
echo "‚úÖ Comment posted successfully"

# --- Upload summary artifacts (relative paths) ---
if command -v buildkite-agent >/dev/null 2>&1; then
  echo "Uploading summary artifacts..."
  buildkite-agent artifact upload "${SUMMARY_FILE}"
  buildkite-agent artifact upload "github-comment.md"
  echo "‚úÖ Summary artifacts uploaded"
fi

# --- Exit status for the step (don‚Äôt fail the build on failures) ---
if [[ $FAILED_COUNT -eq 0 ]]; then
  echo "üéâ All integration checks passed!"
  exit 0
else
  echo "‚ö†Ô∏è Some integration checks failed, but PRs have been created."
  exit 0
fi