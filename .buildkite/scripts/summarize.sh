#!/usr/bin/env bash#!/usr/bin/env bash

set -euo pipefailset -euo pipefail

mkdir -p work/summary

echo "--- üìä Generating Integration Check Summary"buildkite-agent artifact download "work/*/result.json" work/summary >/dev/null 2>&1 || true



# Create summary directory and download artifactsjq -s '

mkdir -p work/summary  ( . // [] ) as $arr

echo "Downloading result artifacts..."  | {

if ! buildkite-agent artifact download "work/*/result.json" work/summary >/dev/null 2>&1; then      total: ($arr | length),

  echo "‚ö†Ô∏è  No result artifacts found. This might indicate no jobs completed successfully."      passed: ($arr | map(select(.status=="passed")) | length),

fi      failed: ($arr | map(select(.status=="failed")) | length),

      not_found: ($arr | map(select(.status=="not_found")) | length),

# Install GitHub CLI if needed for issue commenting      prs_created: ($arr | map(select(.pr_created==true)) | length),

install_gh() {      results: $arr

  if command -v gh >/dev/null 2>&1; then    }

    return 0' work/summary/*.json 2>/dev/null > work/summary/report.json || echo '{"total":0,"results":[]}' > work/summary/report.json

  fi

  echo "Summary:"

  echo "Installing GitHub CLI..."jq -C . work/summary/report.json || cat work/summary/report.json

  if command -v apt-get >/dev/null 2>&1; then

    # Ubuntu/Debian# Create detailed comment for GitHub issue

    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpgif [[ -n "${ISSUE_REPO:-}" && -n "${ISSUE_NUMBER:-}" && -n "${GITHUB_TOKEN:-}" ]]; then

    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null  echo "--- Creating GitHub issue comment"

    sudo apt update && sudo apt install -y gh  

  elif command -v yum >/dev/null 2>&1; then  # Generate summary statistics

    # RHEL/CentOS  TOTAL=$(jq -r '.total' work/summary/report.json)

    sudo yum install -y gh  PASSED=$(jq -r '.passed' work/summary/report.json)

  elif command -v curl >/dev/null 2>&1; then  FAILED=$(jq -r '.failed' work/summary/report.json)

    # Generic installation  NOT_FOUND=$(jq -r '.not_found' work/summary/report.json)

    curl -sL https://github.com/cli/cli/releases/latest/download/gh_*_linux_amd64.tar.gz | tar -xz --strip-components=1 -C /tmp  PRS_CREATED=$(jq -r '.prs_created' work/summary/report.json)

    sudo mv /tmp/bin/gh /usr/local/bin/gh  

  else  # Generate detailed results

    echo "‚ùå Cannot install GitHub CLI - no suitable package manager found"  mapfile -t check_lines < <(jq -r '.results[] | "- **\(.integration)**: \(.status)" + (if .pr_created then " (PR created)" else "" end)' work/summary/report.json)

    return 1  

  fi  # Generate PR links if any were created

    mapfile -t pr_lines < <(jq -r '.results[] | select(.pr_created == true) | "- [\(.integration)](\(.pr_url))"' work/summary/report.json)

  gh --version  

}  {

    echo "## üîç elastic-package check summary for Issue #${ISSUE_NUMBER}"

# Process results and generate comprehensive report    echo ""

generate_report() {    echo "### üìä Results Overview"

  local report_file="work/summary/report.json"    echo "- **Total integrations:** ${TOTAL}"

      echo "- **Passed:** ${PASSED} ‚úÖ"

  if [[ -f work/summary/work/*/result.json ]]; then    echo "- **Failed:** ${FAILED} ‚ùå"

    # Results exist, process them    echo "- **Not found:** ${NOT_FOUND} ‚ö†Ô∏è"

    jq -s '    echo "- **PRs created:** ${PRS_CREATED} üîß"

      ( . // [] ) as $results |    echo ""

      ($results | length) as $total |    echo "### üìù Detailed Results"

      ($results | map(select(.status == "passed")) | length) as $passed |    printf "%s\n" "${check_lines[@]}"

      ($results | map(select(.status == "failed")) | length) as $failed |    

      ($results | map(select(.status == "not_found")) | length) as $not_found |    if [[ ${#pr_lines[@]} -gt 0 ]]; then

      ($results | map(select(.pr_created == true)) | length) as $prs_created |      echo ""

      {      echo "### üîß Pull Requests Created"

        total: $total,      printf "%s\n" "${pr_lines[@]}"

        passed: $passed,      echo ""

        failed: $failed,      echo "Please review and merge the PRs above to fix the identified issues."

        not_found: $not_found,    fi

        prs_created: $prs_created,    

        success_rate: (if $total > 0 then ($passed / $total * 100 | floor) else 0 end),    echo ""

        results: $results,    echo "---"

        timestamp: now,    echo "*This report was automatically generated by [Buildkite](${BUILDKITE_BUILD_URL:-})*"

        build_url: env.BUILDKITE_BUILD_URL,    

        pipeline: env.BUILDKITE_PIPELINE_NAME  } > work/summary/comment.txt

      }  

    ' work/summary/work/*/result.json > "$report_file"  # Post comment to GitHub issue

  else  if command -v gh >/dev/null 2>&1; then

    # No results found, create empty report    gh issue comment "$ISSUE_NUMBER" -R "$ISSUE_REPO" -F work/summary/comment.txt || true

    jq -n '{  else

      total: 0,    echo "GitHub CLI not available, skipping issue comment"

      passed: 0,  fi

      failed: 0,fi

      not_found: 0,

      prs_created: 0,buildkite-agent artifact upload "work/summary/report.json"

      success_rate: 0,

      results: [],
      timestamp: now,
      build_url: env.BUILDKITE_BUILD_URL,
      pipeline: env.BUILDKITE_PIPELINE_NAME,
      error: "No integration results found"
    }' > "$report_file"
  fi
  
  echo "üìã Summary Report Generated:"
  jq -C . "$report_file" || cat "$report_file"
}

# Generate GitHub issue comment
generate_github_comment() {
  local report_file="work/summary/report.json"
  local comment_file="work/summary/github_comment.md"
  
  # Extract data from report
  local total=$(jq -r '.total' "$report_file")
  local passed=$(jq -r '.passed' "$report_file")
  local failed=$(jq -r '.failed' "$report_file")
  local not_found=$(jq -r '.not_found' "$report_file")
  local prs_created=$(jq -r '.prs_created' "$report_file")
  local success_rate=$(jq -r '.success_rate' "$report_file")
  local build_url=$(jq -r '.build_url // "N/A"' "$report_file")
  local timestamp=$(jq -r '.timestamp' "$report_file")
  
  # Create comment content
  cat > "$comment_file" << EOF
## üîç Elastic Package Integration Check Results

### üìä Summary
| Metric | Value |
|--------|-------|
| **Total Integrations** | ${total} |
| **‚úÖ Passed** | ${passed} |
| **‚ùå Failed** | ${failed} |
| **‚ö†Ô∏è Not Found** | ${not_found} |
| **üîß PRs Created** | ${prs_created} |
| **üìà Success Rate** | ${success_rate}% |

EOF

  # Add detailed results if any exist
  if [[ "$total" -gt 0 ]]; then
    echo "### üìù Detailed Results" >> "$comment_file"
    echo "" >> "$comment_file"
    
    # Generate results table
    jq -r '.results[] | 
      "| **\(.integration)** | \(
        if .status == "passed" then "‚úÖ Passed"
        elif .status == "failed" then "‚ùå Failed"
        elif .status == "not_found" then "‚ö†Ô∏è Not Found"
        else .status
        end
      ) | \(
        if .pr_created == true then "üîß [PR Created](\(.pr_url // ""))"
        else "‚Äî"
        end
      ) |"' "$report_file" >> "$comment_file"
    
    # Add PR section if any were created
    local pr_count=$(jq -r '[.results[] | select(.pr_created == true)] | length' "$report_file")
    if [[ "$pr_count" -gt 0 ]]; then
      echo "" >> "$comment_file"
      echo "### üîß Pull Requests Created" >> "$comment_file"
      echo "" >> "$comment_file"
      echo "The following PRs were automatically created to fix identified issues:" >> "$comment_file"
      echo "" >> "$comment_file"
      
      jq -r '.results[] | select(.pr_created == true) | 
        "- **\(.integration)**: [\(.pr_url)](\(.pr_url))"' "$report_file" >> "$comment_file"
      
      echo "" >> "$comment_file"
      echo "> üí° **Next Steps**: Please review and merge these PRs to fix the integration issues." >> "$comment_file"
    fi
  else
    echo "### ‚ö†Ô∏è No Results" >> "$comment_file"
    echo "" >> "$comment_file"
    echo "No integration check results were found. This might indicate:" >> "$comment_file"
    echo "- No integrations were specified in the issue" >> "$comment_file"
    echo "- All integration jobs failed to start" >> "$comment_file"
    echo "- Technical issues with the pipeline" >> "$comment_file"
  fi
  
  # Add footer
  cat >> "$comment_file" << EOF

---
<details>
<summary>üîß Build Information</summary>

- **Build**: [${build_url}](${build_url})
- **Pipeline**: ${BUILDKITE_PIPELINE_NAME:-buildkite-test}
- **Timestamp**: $(date -d "@${timestamp}" 2>/dev/null || echo "Unknown")
- **Agent**: ${BUILDKITE_AGENT_NAME:-Unknown}

</details>

*This report was automatically generated by Buildkite* ü§ñ
EOF

  echo "üí¨ GitHub comment generated: $comment_file"
}

# Post comment to GitHub issue
post_github_comment() {
  local comment_file="work/summary/github_comment.md"
  
  if [[ -z "${GITHUB_TOKEN:-}" ]]; then
    echo "‚ö†Ô∏è  No GITHUB_TOKEN provided, skipping GitHub comment"
    return 0
  fi
  
  if [[ -z "${ISSUE_REPO:-}" || -z "${ISSUE_NUMBER:-}" ]]; then
    echo "‚ö†Ô∏è  Missing ISSUE_REPO or ISSUE_NUMBER, skipping GitHub comment"
    return 0
  fi
  
  echo "Posting comment to GitHub issue ${ISSUE_REPO}#${ISSUE_NUMBER}..."
  
  # Authenticate with GitHub
  export GH_TOKEN="$GITHUB_TOKEN"
  
  if gh issue comment "$ISSUE_NUMBER" -R "$ISSUE_REPO" -F "$comment_file"; then
    echo "‚úÖ Successfully posted comment to GitHub issue"
  else
    echo "‚ùå Failed to post comment to GitHub issue"
    echo "Comment content:"
    cat "$comment_file"
  fi
}

# Main execution
main() {
  echo "üöÄ Starting summary generation..."
  
  # Install GitHub CLI if needed
  if [[ -n "${GITHUB_TOKEN:-}" && -n "${ISSUE_REPO:-}" && -n "${ISSUE_NUMBER:-}" ]]; then
    install_gh || echo "‚ö†Ô∏è  GitHub CLI installation failed, will skip issue commenting"
  fi
  
  # Generate comprehensive report
  generate_report
  
  # Generate and post GitHub comment
  if [[ -n "${GITHUB_TOKEN:-}" && -n "${ISSUE_REPO:-}" && -n "${ISSUE_NUMBER:-}" ]]; then
    generate_github_comment
    post_github_comment
  else
    echo "‚ÑπÔ∏è  Skipping GitHub issue comment (missing required environment variables)"
  fi
  
  # Upload artifacts
  echo "üì§ Uploading summary artifacts..."
  buildkite-agent artifact upload "work/summary/*"
  
  echo "‚úÖ Summary generation completed successfully!"
}

# Run main function
main "$@"